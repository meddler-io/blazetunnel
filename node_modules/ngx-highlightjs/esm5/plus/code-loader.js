import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { EMPTY } from 'rxjs';
import { catchError, publishReplay, refCount } from 'rxjs/operators';
import { GIST_OPTIONS } from './gist.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./gist.model";
var CodeLoader = /** @class */ (function () {
    function CodeLoader(_http, _options) {
        this._http = _http;
        this._options = _options;
    }
    /**
     * Get plus code
     * @param id Gist ID
     */
    CodeLoader.prototype.getCodeFromGist = function (id) {
        var params;
        if (this.isOAuthProvided()) {
            params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);
        }
        return this.fetchFile("https://api.github.com/gists/" + id, { params: params, responseType: 'json' });
    };
    /**
     * Get code by URL
     * @param url File raw link
     */
    CodeLoader.prototype.getCodeFromUrl = function (url) {
        return this.fetchFile(url, { responseType: 'text' });
    };
    /**
     * Check if OAuth option is provided
     */
    CodeLoader.prototype.isOAuthProvided = function () {
        return !!this._options && !!this._options.clientId && !!this._options.clientSecret;
    };
    CodeLoader.prototype.fetchFile = function (url, options) {
        // Check if URL is valid
        if (isUrl(url)) {
            return this._http.get(url, options).pipe(
            // Catch response
            publishReplay(1), refCount(), catchError(function (err) {
                console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);
                return EMPTY;
            }));
        }
        return EMPTY;
    };
    CodeLoader.ctorParameters = function () { return [
        { type: HttpClient },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GIST_OPTIONS,] }] }
    ]; };
    CodeLoader.ɵprov = i0.ɵɵdefineInjectable({ factory: function CodeLoader_Factory() { return new CodeLoader(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.GIST_OPTIONS, 8)); }, token: CodeLoader, providedIn: "root" });
    CodeLoader = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(1, Optional()), __param(1, Inject(GIST_OPTIONS)),
        __metadata("design:paramtypes", [HttpClient, Object])
    ], CodeLoader);
    return CodeLoader;
}());
export { CodeLoader };
function isUrl(url) {
    var regExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
    return regExp.test(url);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1sb2FkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaGlnaGxpZ2h0anMvcGx1cy8iLCJzb3VyY2VzIjpbImNvZGUtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RCxPQUFPLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JFLE9BQU8sRUFBUSxZQUFZLEVBQWUsTUFBTSxjQUFjLENBQUM7Ozs7QUFLL0Q7SUFDRSxvQkFBb0IsS0FBaUIsRUFBNEMsUUFBcUI7UUFBbEYsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUE0QyxhQUFRLEdBQVIsUUFBUSxDQUFhO0lBQ3RHLENBQUM7SUFFRDs7O09BR0c7SUFDSCxvQ0FBZSxHQUFmLFVBQWdCLEVBQVU7UUFDeEIsSUFBSSxNQUFrQixDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO1lBQzFCLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDckg7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsa0NBQWdDLEVBQUksRUFBRSxFQUFFLE1BQU0sUUFBQSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7SUFFRDs7O09BR0c7SUFDSCxtQ0FBYyxHQUFkLFVBQWUsR0FBVztRQUN4QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVEOztPQUVHO0lBQ0ssb0NBQWUsR0FBdkI7UUFDRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUM7SUFDckYsQ0FBQztJQUVPLDhCQUFTLEdBQWpCLFVBQWtCLEdBQVcsRUFBRSxPQUFZO1FBQ3pDLHdCQUF3QjtRQUN4QixJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUk7WUFDdEMsaUJBQWlCO1lBQ2pCLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFDaEIsUUFBUSxFQUFFLEVBQ1YsVUFBVSxDQUFDLFVBQUMsR0FBVTtnQkFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3ZFLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLENBQ0gsQ0FBQztTQUNIO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztnQkE1QzBCLFVBQVU7Z0RBQUcsUUFBUSxZQUFJLE1BQU0sU0FBQyxZQUFZOzs7SUFENUQsVUFBVTtRQUh0QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO1FBRXdDLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTt5Q0FBN0MsVUFBVTtPQUQxQixVQUFVLENBK0N0QjtxQkF4REQ7Q0F3REMsQUEvQ0QsSUErQ0M7U0EvQ1ksVUFBVTtBQWlEdkIsU0FBUyxLQUFLLENBQUMsR0FBVztJQUN4QixJQUFNLE1BQU0sR0FBRyxtRkFBbUYsQ0FBQztJQUNuRyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBFTVBUWSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgcHVibGlzaFJlcGxheSwgcmVmQ291bnQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBHaXN0LCBHSVNUX09QVElPTlMsIEdpc3RPcHRpb25zIH0gZnJvbSAnLi9naXN0Lm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29kZUxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2h0dHA6IEh0dHBDbGllbnQsIEBPcHRpb25hbCgpIEBJbmplY3QoR0lTVF9PUFRJT05TKSBwcml2YXRlIF9vcHRpb25zOiBHaXN0T3B0aW9ucykge1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBwbHVzIGNvZGVcbiAgICogQHBhcmFtIGlkIEdpc3QgSURcbiAgICovXG4gIGdldENvZGVGcm9tR2lzdChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxHaXN0PiB7XG4gICAgbGV0IHBhcmFtczogSHR0cFBhcmFtcztcbiAgICBpZiAodGhpcy5pc09BdXRoUHJvdmlkZWQoKSkge1xuICAgICAgcGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKS5zZXQoJ2NsaWVudF9pZCcsIHRoaXMuX29wdGlvbnMuY2xpZW50SWQpLnNldCgnY2xpZW50X3NlY3JldCcsIHRoaXMuX29wdGlvbnMuY2xpZW50U2VjcmV0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hGaWxlKGBodHRwczovL2FwaS5naXRodWIuY29tL2dpc3RzLyR7aWR9YCwgeyBwYXJhbXMsIHJlc3BvbnNlVHlwZTogJ2pzb24nIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb2RlIGJ5IFVSTFxuICAgKiBAcGFyYW0gdXJsIEZpbGUgcmF3IGxpbmtcbiAgICovXG4gIGdldENvZGVGcm9tVXJsKHVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEZpbGUodXJsLCB7IHJlc3BvbnNlVHlwZTogJ3RleHQnIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIE9BdXRoIG9wdGlvbiBpcyBwcm92aWRlZFxuICAgKi9cbiAgcHJpdmF0ZSBpc09BdXRoUHJvdmlkZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5fb3B0aW9ucyAmJiAhIXRoaXMuX29wdGlvbnMuY2xpZW50SWQgJiYgISF0aGlzLl9vcHRpb25zLmNsaWVudFNlY3JldDtcbiAgfVxuXG4gIHByaXZhdGUgZmV0Y2hGaWxlKHVybDogc3RyaW5nLCBvcHRpb25zOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIC8vIENoZWNrIGlmIFVSTCBpcyB2YWxpZFxuICAgIGlmIChpc1VybCh1cmwpKSB7XG4gICAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodXJsLCBvcHRpb25zKS5waXBlKFxuICAgICAgICAvLyBDYXRjaCByZXNwb25zZVxuICAgICAgICBwdWJsaXNoUmVwbGF5KDEpLFxuICAgICAgICByZWZDb3VudCgpLFxuICAgICAgICBjYXRjaEVycm9yKChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignW05neEhpZ2hsaWdodF06IFVuYWJsZSB0byBmZXRjaCB0aGUgVVJMIScsIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gRU1QVFk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBpc1VybCh1cmw6IHN0cmluZykge1xuICBjb25zdCByZWdFeHAgPSAvKGZ0cHxodHRwfGh0dHBzKTpcXC9cXC8oXFx3Kzp7MCwxfVxcdypAKT8oXFxTKykoOlswLTldKyk/KFxcL3xcXC8oW1xcdyMhOi4/Kz0mJUAhXFwtXFwvXSkpPy87XG4gIHJldHVybiByZWdFeHAudGVzdCh1cmwpO1xufVxuIl19