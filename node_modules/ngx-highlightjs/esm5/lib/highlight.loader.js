import { __decorate, __metadata, __param, __read, __spread } from "tslib";
import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { BehaviorSubject, from, EMPTY, zip } from 'rxjs';
import { catchError, tap, map, switchMap, filter, take } from 'rxjs/operators';
import { HIGHLIGHT_OPTIONS } from './highlight.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./highlight.model";
// @dynamic
var HighlightLoader = /** @class */ (function () {
    function HighlightLoader(doc, platformId, _options) {
        var _this = this;
        this._options = _options;
        // Stream that emits when hljs library is loaded and ready to use
        this._ready = new BehaviorSubject(null);
        this.ready = this._ready.asObservable().pipe(filter(function (hljs) { return !!hljs; }), take(1));
        // Check if hljs is already available
        if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {
            this._ready.next(doc.defaultView.hljs);
        }
        else {
            // Load hljs library
            this._loadLibrary().pipe(switchMap(function (hljs) {
                if (_this._options && _this._options.lineNumbers) {
                    // Make hljs available on window object (required for the line numbers library)
                    doc.defaultView.hljs = hljs;
                    // Load line numbers library
                    return loadLineNumbers().pipe(tap(function () { return _this._ready.next(hljs); }));
                }
                else {
                    _this._ready.next(hljs);
                    return EMPTY;
                }
            }), catchError(function (e) {
                console.error('Unable to load hljs library', e);
                return EMPTY;
            })).subscribe();
        }
    }
    /**
     * Lazy-Load highlight.js library
     */
    HighlightLoader.prototype._loadLibrary = function () {
        var _this = this;
        return (this._options && this._options.languages && Object.keys(this._options.languages).length)
            ? from(loadCoreLibrary()).pipe(switchMap(function (hljs) { return _this._loadLanguages(hljs); }))
            : from(loadAllLibrary());
    };
    /**
     * Lazy-load highlight.js languages
     */
    HighlightLoader.prototype._loadLanguages = function (hljs) {
        var languages = Object.entries(this._options.languages).map(function (_a) {
            var _b = __read(_a, 2), langName = _b[0], langLoader = _b[1];
            return importModule(langLoader()).pipe(tap(function (langFunc) { return hljs.registerLanguage(langName, langFunc); }));
        });
        return zip.apply(void 0, __spread(languages)).pipe(map(function () { return hljs; }));
    };
    HighlightLoader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHT_OPTIONS,] }] }
    ]; };
    HighlightLoader.ɵprov = i0.ɵɵdefineInjectable({ factory: function HighlightLoader_Factory() { return new HighlightLoader(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i2.HIGHLIGHT_OPTIONS, 8)); }, token: HighlightLoader, providedIn: "root" });
    HighlightLoader = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Inject(DOCUMENT)),
        __param(1, Inject(PLATFORM_ID)),
        __param(2, Optional()), __param(2, Inject(HIGHLIGHT_OPTIONS)),
        __metadata("design:paramtypes", [Object, Object, Object])
    ], HighlightLoader);
    return HighlightLoader;
}());
export { HighlightLoader };
/**
 * Import highlight.js core library
 */
function loadCoreLibrary() {
    return importModule(import('highlight.js/lib/highlight'));
}
/**
 * Import highlight.js library with all languages
 */
function loadAllLibrary() {
    return importModule(import('highlight.js'));
}
/**
 * Import line numbers library
 */
function loadLineNumbers() {
    return importModule(import('highlightjs-line-numbers.js'));
}
/**
 * Map loader response to module object
 */
var importModule = function (moduleLoader) {
    return from(moduleLoader).pipe(filter(function (module) { return !!module && !!module.default; }), map(function (module) { return module.default; }));
};
var ɵ0 = importModule;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,