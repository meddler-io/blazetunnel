import { __decorate, __metadata, __param } from "tslib";
import { Directive, Input, Output, Inject, Optional, OnChanges, SimpleChanges, EventEmitter, ElementRef, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { animationFrameScheduler } from 'rxjs';
import { HighlightJS } from './highlight.service';
import { HIGHLIGHT_OPTIONS } from './highlight.model';
var Highlight = /** @class */ (function () {
    function Highlight(el, _hljs, _sanitizer, _options) {
        this._hljs = _hljs;
        this._sanitizer = _sanitizer;
        this._options = _options;
        // Stream that emits when code string is highlighted
        this.highlighted = new EventEmitter();
        this._nativeElement = el.nativeElement;
    }
    Highlight.prototype.ngOnChanges = function (changes) {
        if (changes.code &&
            changes.code.currentValue &&
            changes.code.currentValue !== changes.code.previousValue) {
            this.highlightElement(this.code, this.languages);
        }
    };
    /**
     * Highlighting with language detection and fix markup.
     * @param code Accepts a string with the code to highlight
     * @param languages An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    Highlight.prototype.highlightElement = function (code, languages) {
        var _this = this;
        // Set code text before highlighting
        this.setTextContent(code);
        this._hljs.highlightAuto(code, languages).subscribe(function (res) {
            // Set highlighted code
            _this.setInnerHTML(res.value);
            // Check if user want to show line numbers
            if (_this.lineNumbers && _this._options && _this._options.lineNumbers) {
                _this.addLineNumbers();
            }
            // Forward highlight response to the highlighted output
            _this.highlighted.emit(res);
        });
    };
    Highlight.prototype.addLineNumbers = function () {
        var _this = this;
        // Clean up line numbers observer
        this.destroyLineNumbersObserver();
        animationFrameScheduler.schedule(function () {
            // Add line numbers
            _this._hljs.lineNumbersBlock(_this._nativeElement).subscribe();
            // If lines count is 1, the line numbers library will not add numbers
            // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element
            _this._lineNumbersObs = new MutationObserver(function () {
                if (_this._nativeElement.firstElementChild && _this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {
                    _this._nativeElement.classList.add('hljs-line-numbers');
                }
                _this.destroyLineNumbersObserver();
            });
            _this._lineNumbersObs.observe(_this._nativeElement, { childList: true });
        });
    };
    Highlight.prototype.destroyLineNumbersObserver = function () {
        if (this._lineNumbersObs) {
            this._lineNumbersObs.disconnect();
            this._lineNumbersObs = null;
        }
    };
    Highlight.prototype.setTextContent = function (content) {
        var _this = this;
        animationFrameScheduler.schedule(function () {
            return _this._nativeElement.textContent = content;
        });
    };
    Highlight.prototype.setInnerHTML = function (content) {
        var _this = this;
        animationFrameScheduler.schedule(function () {
            return _this._nativeElement.innerHTML = _this._sanitizer.sanitize(SecurityContext.HTML, content);
        });
    };
    Highlight.ctorParameters = function () { return [
        { type: ElementRef },
        { type: HighlightJS },
        { type: DomSanitizer },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHT_OPTIONS,] }] }
    ]; };
    __decorate([
        Input('highlight'),
        __metadata("design:type", String)
    ], Highlight.prototype, "code", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], Highlight.prototype, "languages", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], Highlight.prototype, "lineNumbers", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], Highlight.prototype, "highlighted", void 0);
    Highlight = __decorate([
        Directive({
            host: {
                '[class.hljs]': 'true'
            },
            selector: '[highlight]'
        }),
        __param(3, Optional()), __param(3, Inject(HIGHLIGHT_OPTIONS)),
        __metadata("design:paramtypes", [ElementRef,
            HighlightJS,
            DomSanitizer, Object])
    ], Highlight);
    return Highlight;
}());
export { Highlight };
//# sourceMappingURL=data:application/json;base64,