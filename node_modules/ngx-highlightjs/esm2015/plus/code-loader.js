import { __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { EMPTY } from 'rxjs';
import { catchError, publishReplay, refCount } from 'rxjs/operators';
import { GIST_OPTIONS } from './gist.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./gist.model";
let CodeLoader = class CodeLoader {
    constructor(_http, _options) {
        this._http = _http;
        this._options = _options;
    }
    /**
     * Get plus code
     * @param id Gist ID
     */
    getCodeFromGist(id) {
        let params;
        if (this.isOAuthProvided()) {
            params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);
        }
        return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });
    }
    /**
     * Get code by URL
     * @param url File raw link
     */
    getCodeFromUrl(url) {
        return this.fetchFile(url, { responseType: 'text' });
    }
    /**
     * Check if OAuth option is provided
     */
    isOAuthProvided() {
        return !!this._options && !!this._options.clientId && !!this._options.clientSecret;
    }
    fetchFile(url, options) {
        // Check if URL is valid
        if (isUrl(url)) {
            return this._http.get(url, options).pipe(
            // Catch response
            publishReplay(1), refCount(), catchError((err) => {
                console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);
                return EMPTY;
            }));
        }
        return EMPTY;
    }
};
CodeLoader.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GIST_OPTIONS,] }] }
];
CodeLoader.ɵprov = i0.ɵɵdefineInjectable({ factory: function CodeLoader_Factory() { return new CodeLoader(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.GIST_OPTIONS, 8)); }, token: CodeLoader, providedIn: "root" });
CodeLoader = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(1, Optional()), __param(1, Inject(GIST_OPTIONS)),
    __metadata("design:paramtypes", [HttpClient, Object])
], CodeLoader);
export { CodeLoader };
function isUrl(url) {
    const regExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
    return regExp.test(url);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1sb2FkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaGlnaGxpZ2h0anMvcGx1cy8iLCJzb3VyY2VzIjpbImNvZGUtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RCxPQUFPLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JFLE9BQU8sRUFBUSxZQUFZLEVBQWUsTUFBTSxjQUFjLENBQUM7Ozs7QUFLL0QsSUFBYSxVQUFVLEdBQXZCLE1BQWEsVUFBVTtJQUNyQixZQUFvQixLQUFpQixFQUE0QyxRQUFxQjtRQUFsRixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQTRDLGFBQVEsR0FBUixRQUFRLENBQWE7SUFDdEcsQ0FBQztJQUVEOzs7T0FHRztJQUNILGVBQWUsQ0FBQyxFQUFVO1FBQ3hCLElBQUksTUFBa0IsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUMxQixNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3JIO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGdDQUFnQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsY0FBYyxDQUFDLEdBQVc7UUFDeEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7T0FFRztJQUNLLGVBQWU7UUFDckIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO0lBQ3JGLENBQUM7SUFFTyxTQUFTLENBQUMsR0FBVyxFQUFFLE9BQVk7UUFDekMsd0JBQXdCO1FBQ3hCLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSTtZQUN0QyxpQkFBaUI7WUFDakIsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUNoQixRQUFRLEVBQUUsRUFDVixVQUFVLENBQUMsQ0FBQyxHQUFVLEVBQUUsRUFBRTtnQkFDeEIsT0FBTyxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3ZFLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLENBQ0gsQ0FBQztTQUNIO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBRUYsQ0FBQTs7WUE5QzRCLFVBQVU7NENBQUcsUUFBUSxZQUFJLE1BQU0sU0FBQyxZQUFZOzs7QUFENUQsVUFBVTtJQUh0QixVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO0lBRXdDLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtxQ0FBN0MsVUFBVTtHQUQxQixVQUFVLENBK0N0QjtTQS9DWSxVQUFVO0FBaUR2QixTQUFTLEtBQUssQ0FBQyxHQUFXO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLG1GQUFtRixDQUFDO0lBQ25HLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIEVNUFRZIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBwdWJsaXNoUmVwbGF5LCByZWZDb3VudCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEdpc3QsIEdJU1RfT1BUSU9OUywgR2lzdE9wdGlvbnMgfSBmcm9tICcuL2dpc3QubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb2RlTG9hZGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaHR0cDogSHR0cENsaWVudCwgQE9wdGlvbmFsKCkgQEluamVjdChHSVNUX09QVElPTlMpIHByaXZhdGUgX29wdGlvbnM6IEdpc3RPcHRpb25zKSB7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHBsdXMgY29kZVxuICAgKiBAcGFyYW0gaWQgR2lzdCBJRFxuICAgKi9cbiAgZ2V0Q29kZUZyb21HaXN0KGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEdpc3Q+IHtcbiAgICBsZXQgcGFyYW1zOiBIdHRwUGFyYW1zO1xuICAgIGlmICh0aGlzLmlzT0F1dGhQcm92aWRlZCgpKSB7XG4gICAgICBwYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpLnNldCgnY2xpZW50X2lkJywgdGhpcy5fb3B0aW9ucy5jbGllbnRJZCkuc2V0KCdjbGllbnRfc2VjcmV0JywgdGhpcy5fb3B0aW9ucy5jbGllbnRTZWNyZXQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mZXRjaEZpbGUoYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vZ2lzdHMvJHtpZH1gLCB7IHBhcmFtcywgcmVzcG9uc2VUeXBlOiAnanNvbicgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNvZGUgYnkgVVJMXG4gICAqIEBwYXJhbSB1cmwgRmlsZSByYXcgbGlua1xuICAgKi9cbiAgZ2V0Q29kZUZyb21VcmwodXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmZldGNoRmlsZSh1cmwsIHsgcmVzcG9uc2VUeXBlOiAndGV4dCcgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgT0F1dGggb3B0aW9uIGlzIHByb3ZpZGVkXG4gICAqL1xuICBwcml2YXRlIGlzT0F1dGhQcm92aWRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLl9vcHRpb25zICYmICEhdGhpcy5fb3B0aW9ucy5jbGllbnRJZCAmJiAhIXRoaXMuX29wdGlvbnMuY2xpZW50U2VjcmV0O1xuICB9XG5cbiAgcHJpdmF0ZSBmZXRjaEZpbGUodXJsOiBzdHJpbmcsIG9wdGlvbnM6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgLy8gQ2hlY2sgaWYgVVJMIGlzIHZhbGlkXG4gICAgaWYgKGlzVXJsKHVybCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh1cmwsIG9wdGlvbnMpLnBpcGUoXG4gICAgICAgIC8vIENhdGNoIHJlc3BvbnNlXG4gICAgICAgIHB1Ymxpc2hSZXBsYXkoMSksXG4gICAgICAgIHJlZkNvdW50KCksXG4gICAgICAgIGNhdGNoRXJyb3IoKGVycjogRXJyb3IpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdbTmd4SGlnaGxpZ2h0XTogVW5hYmxlIHRvIGZldGNoIHRoZSBVUkwhJywgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgIHJldHVybiBFTVBUWTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBFTVBUWTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGlzVXJsKHVybDogc3RyaW5nKSB7XG4gIGNvbnN0IHJlZ0V4cCA9IC8oZnRwfGh0dHB8aHR0cHMpOlxcL1xcLyhcXHcrOnswLDF9XFx3KkApPyhcXFMrKSg6WzAtOV0rKT8oXFwvfFxcLyhbXFx3IyE6Lj8rPSYlQCFcXC1cXC9dKSk/LztcbiAgcmV0dXJuIHJlZ0V4cC50ZXN0KHVybCk7XG59XG4iXX0=