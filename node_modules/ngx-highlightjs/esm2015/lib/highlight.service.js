import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { filter, map, tap } from 'rxjs/operators';
import { HIGHLIGHT_OPTIONS } from './highlight.model';
import { HighlightLoader } from './highlight.loader';
import * as i0 from "@angular/core";
import * as i1 from "./highlight.loader";
import * as i2 from "./highlight.model";
let HighlightJS = class HighlightJS {
    constructor(_loader, options) {
        this._loader = _loader;
        // Load highlight.js library on init
        _loader.ready.pipe().subscribe((hljs) => {
            this._hljs = hljs;
            if (options && options.config) {
                // Set global config if present
                hljs.configure(options.config);
                if (hljs.listLanguages().length < 1) {
                    console.error('[HighlightJS]: No languages were registered!');
                }
            }
        });
    }
    // A reference for hljs library
    get hljs() {
        return this._hljs;
    }
    /**
     * Core highlighting function.
     * @param name Accepts a language name, or an alias
     * @param value A string with the code to highlight.
     * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish
     * even in case of detecting illegal syntax for the language instead of throwing an exception.
     * @param continuation An optional mode stack representing unfinished parsing.
     * When present, the function will restart parsing from this state instead of initializing a new one
     */
    highlight(name, value, ignore_illegals, continuation) {
        return this._loader.ready.pipe(map((hljs) => hljs.highlight(name, value, ignore_illegals, continuation)));
    }
    /**
     * Highlighting with language detection.
     * @param value Accepts a string with the code to highlight
     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    highlightAuto(value, languageSubset) {
        return this._loader.ready.pipe(map((hljs) => hljs.highlightAuto(value, languageSubset)));
    }
    /**
     * Post-processing of the highlighted markup.
     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.
     * Options are set globally with configure.
     * @param value Accepts a string with the highlighted markup
     */
    fixMarkup(value) {
        return this._loader.ready.pipe(map((hljs) => hljs.fixMarkup(value)));
    }
    /**
     * Applies highlighting to a DOM node containing code.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.
     * See the class reference for all available language names and aliases.
     * @param block The element to apply highlight on.
     */
    highlightBlock(block) {
        return this._loader.ready.pipe(map((hljs) => hljs.highlightBlock(block)));
    }
    /**
     * Configures global options:
     * @param config HighlightJs configuration argument
     */
    configure(config) {
        return this._loader.ready.pipe(map((hljs) => hljs.configure(config)));
    }
    /**
     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
     */
    initHighlighting() {
        return this._loader.ready.pipe(map((hljs) => hljs.initHighlighting()));
    }
    /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param name A string with the name of the language being registered
     * @param language A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     */
    registerLanguage(name, language) {
        return this._loader.ready.pipe(tap((hljs) => hljs.registerLanguage(name, language)));
    }
    /**
     * @return The languages names list.
     */
    listLanguages() {
        return this._loader.ready.pipe(map((hljs) => hljs.listLanguages()));
    }
    /**
     * Looks up a language by name or alias.
     * @param name Language name
     * @return The language object if found, undefined otherwise.
     */
    getLanguage(name) {
        return this._loader.ready.pipe(map((hljs) => hljs.getLanguage(name)));
    }
    /**
     * Display line numbers
     * @param el Code element
     */
    lineNumbersBlock(el) {
        return this._loader.ready.pipe(filter((hljs) => !!hljs.lineNumbersBlock), tap((hljs) => hljs.lineNumbersBlock(el)));
    }
};
HighlightJS.ctorParameters = () => [
    { type: HighlightLoader },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHT_OPTIONS,] }] }
];
HighlightJS.ɵprov = i0.ɵɵdefineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(i0.ɵɵinject(i1.HighlightLoader), i0.ɵɵinject(i2.HIGHLIGHT_OPTIONS, 8)); }, token: HighlightJS, providedIn: "root" });
HighlightJS = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(1, Optional()), __param(1, Inject(HIGHLIGHT_OPTIONS)),
    __metadata("design:paramtypes", [HighlightLoader, Object])
], HighlightJS);
export { HighlightJS };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaGlnaGxpZ2h0anMvIiwic291cmNlcyI6WyJsaWIvaGlnaGxpZ2h0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RCxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQXdFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDNUgsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7O0FBS3JELElBQWEsV0FBVyxHQUF4QixNQUFhLFdBQVc7SUFTdEIsWUFBb0IsT0FBd0IsRUFBeUMsT0FBeUI7UUFBMUYsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFDMUMsb0NBQW9DO1FBQ3BDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBc0IsRUFBRSxFQUFFO1lBQ3hELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7Z0JBQzdCLCtCQUErQjtnQkFDL0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQy9CLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ25DLE9BQU8sQ0FBQyxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztpQkFDL0Q7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQWpCRCwrQkFBK0I7SUFDL0IsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFnQkQ7Ozs7Ozs7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QkFBZ0IsQ0FBQyxFQUMzRCxHQUFHLENBQUMsQ0FBQyxJQUFzQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDM0QsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBOztZQTlIOEIsZUFBZTs0Q0FBRyxRQUFRLFlBQUksTUFBTSxTQUFDLGlCQUFpQjs7O0FBVHhFLFdBQVc7SUFIdkIsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztJQVUrQyxXQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsV0FBQSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtxQ0FBdkQsZUFBZTtHQVRqQyxXQUFXLENBdUl2QjtTQXZJWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEhpZ2hsaWdodENvbmZpZywgSGlnaGxpZ2h0UmVzdWx0LCBIaWdobGlnaHRMaWJyYXJ5LCBIaWdobGlnaHRPcHRpb25zLCBISUdITElHSFRfT1BUSU9OUyB9IGZyb20gJy4vaGlnaGxpZ2h0Lm1vZGVsJztcbmltcG9ydCB7IEhpZ2hsaWdodExvYWRlciB9IGZyb20gJy4vaGlnaGxpZ2h0LmxvYWRlcic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodEpTIHtcblxuICBwcml2YXRlIF9obGpzITogSGlnaGxpZ2h0TGlicmFyeTtcblxuICAvLyBBIHJlZmVyZW5jZSBmb3IgaGxqcyBsaWJyYXJ5XG4gIGdldCBobGpzKCk6IEhpZ2hsaWdodExpYnJhcnkgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5faGxqcztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2xvYWRlcjogSGlnaGxpZ2h0TG9hZGVyLCBAT3B0aW9uYWwoKSBASW5qZWN0KEhJR0hMSUdIVF9PUFRJT05TKSBvcHRpb25zOiBIaWdobGlnaHRPcHRpb25zKSB7XG4gICAgLy8gTG9hZCBoaWdobGlnaHQuanMgbGlicmFyeSBvbiBpbml0XG4gICAgX2xvYWRlci5yZWFkeS5waXBlKCkuc3Vic2NyaWJlKChobGpzOiBIaWdobGlnaHRMaWJyYXJ5KSA9PiB7XG4gICAgICB0aGlzLl9obGpzID0gaGxqcztcbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29uZmlnKSB7XG4gICAgICAgIC8vIFNldCBnbG9iYWwgY29uZmlnIGlmIHByZXNlbnRcbiAgICAgICAgaGxqcy5jb25maWd1cmUob3B0aW9ucy5jb25maWcpO1xuICAgICAgICBpZiAoaGxqcy5saXN0TGFuZ3VhZ2VzKCkubGVuZ3RoIDwgMSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tIaWdobGlnaHRKU106IE5vIGxhbmd1YWdlcyB3ZXJlIHJlZ2lzdGVyZWQhJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3JlIGhpZ2hsaWdodGluZyBmdW5jdGlvbi5cbiAgICogQHBhcmFtIG5hbWUgQWNjZXB0cyBhIGxhbmd1YWdlIG5hbWUsIG9yIGFuIGFsaWFzXG4gICAqIEBwYXJhbSB2YWx1ZSBBIHN0cmluZyB3aXRoIHRoZSBjb2RlIHRvIGhpZ2hsaWdodC5cbiAgICogQHBhcmFtIGlnbm9yZV9pbGxlZ2FscyBXaGVuIHByZXNlbnQgYW5kIGV2YWx1YXRlcyB0byBhIHRydWUgdmFsdWUsIGZvcmNlcyBoaWdobGlnaHRpbmcgdG8gZmluaXNoXG4gICAqIGV2ZW4gaW4gY2FzZSBvZiBkZXRlY3RpbmcgaWxsZWdhbCBzeW50YXggZm9yIHRoZSBsYW5ndWFnZSBpbnN0ZWFkIG9mIHRocm93aW5nIGFuIGV4Y2VwdGlvbi5cbiAgICogQHBhcmFtIGNvbnRpbnVhdGlvbiBBbiBvcHRpb25hbCBtb2RlIHN0YWNrIHJlcHJlc2VudGluZyB1bmZpbmlzaGVkIHBhcnNpbmcuXG4gICAqIFdoZW4gcHJlc2VudCwgdGhlIGZ1bmN0aW9uIHdpbGwgcmVzdGFydCBwYXJzaW5nIGZyb20gdGhpcyBzdGF0ZSBpbnN0ZWFkIG9mIGluaXRpYWxpemluZyBhIG5ldyBvbmVcbiAgICovXG4gIGhpZ2hsaWdodChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGlnbm9yZV9pbGxlZ2FsczogYm9vbGVhbiwgY29udGludWF0aW9uPzogYW55KTogT2JzZXJ2YWJsZTxIaWdobGlnaHRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5fbG9hZGVyLnJlYWR5LnBpcGUoXG4gICAgICBtYXAoKGhsanM6IEhpZ2hsaWdodExpYnJhcnkpID0+IGhsanMuaGlnaGxpZ2h0KG5hbWUsIHZhbHVlLCBpZ25vcmVfaWxsZWdhbHMsIGNvbnRpbnVhdGlvbikpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBkZXRlY3Rpb24uXG4gICAqIEBwYXJhbSB2YWx1ZSBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGNvZGUgdG8gaGlnaGxpZ2h0XG4gICAqIEBwYXJhbSBsYW5ndWFnZVN1YnNldCBBbiBvcHRpb25hbCBhcnJheSBvZiBsYW5ndWFnZSBuYW1lcyBhbmQgYWxpYXNlcyByZXN0cmljdGluZyBkZXRlY3Rpb24gdG8gb25seSB0aG9zZSBsYW5ndWFnZXMuXG4gICAqIFRoZSBzdWJzZXQgY2FuIGFsc28gYmUgc2V0IHdpdGggY29uZmlndXJlLCBidXQgdGhlIGxvY2FsIHBhcmFtZXRlciBvdmVycmlkZXMgdGhlIG9wdGlvbiBpZiBzZXQuXG4gICAqL1xuICBoaWdobGlnaHRBdXRvKHZhbHVlOiBzdHJpbmcsIGxhbmd1YWdlU3Vic2V0OiBzdHJpbmdbXSk6IE9ic2VydmFibGU8SGlnaGxpZ2h0UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuX2xvYWRlci5yZWFkeS5waXBlKFxuICAgICAgbWFwKChobGpzOiBIaWdobGlnaHRMaWJyYXJ5KSA9PiBobGpzLmhpZ2hsaWdodEF1dG8odmFsdWUsIGxhbmd1YWdlU3Vic2V0KSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvc3QtcHJvY2Vzc2luZyBvZiB0aGUgaGlnaGxpZ2h0ZWQgbWFya3VwLlxuICAgKiBDdXJyZW50bHkgY29uc2lzdHMgb2YgcmVwbGFjaW5nIGluZGVudGF0aW9uIFRBQiBjaGFyYWN0ZXJzIGFuZCB1c2luZyA8YnI+IHRhZ3MgaW5zdGVhZCBvZiBuZXctbGluZSBjaGFyYWN0ZXJzLlxuICAgKiBPcHRpb25zIGFyZSBzZXQgZ2xvYmFsbHkgd2l0aCBjb25maWd1cmUuXG4gICAqIEBwYXJhbSB2YWx1ZSBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGhpZ2hsaWdodGVkIG1hcmt1cFxuICAgKi9cbiAgZml4TWFya3VwKHZhbHVlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9sb2FkZXIucmVhZHkucGlwZShcbiAgICAgIG1hcCgoaGxqczogSGlnaGxpZ2h0TGlicmFyeSkgPT4gaGxqcy5maXhNYXJrdXAodmFsdWUpKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBoaWdobGlnaHRpbmcgdG8gYSBET00gbm9kZSBjb250YWluaW5nIGNvZGUuXG4gICAqIFRoZSBmdW5jdGlvbiB1c2VzIGxhbmd1YWdlIGRldGVjdGlvbiBieSBkZWZhdWx0IGJ1dCB5b3UgY2FuIHNwZWNpZnkgdGhlIGxhbmd1YWdlIGluIHRoZSBjbGFzcyBhdHRyaWJ1dGUgb2YgdGhlIERPTSBub2RlLlxuICAgKiBTZWUgdGhlIGNsYXNzIHJlZmVyZW5jZSBmb3IgYWxsIGF2YWlsYWJsZSBsYW5ndWFnZSBuYW1lcyBhbmQgYWxpYXNlcy5cbiAgICogQHBhcmFtIGJsb2NrIFRoZSBlbGVtZW50IHRvIGFwcGx5IGhpZ2hsaWdodCBvbi5cbiAgICovXG4gIGhpZ2hsaWdodEJsb2NrKGJsb2NrOiBIVE1MRWxlbWVudCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9sb2FkZXIucmVhZHkucGlwZShcbiAgICAgIG1hcCgoaGxqczogSGlnaGxpZ2h0TGlicmFyeSkgPT4gaGxqcy5oaWdobGlnaHRCbG9jayhibG9jaykpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIGdsb2JhbCBvcHRpb25zOlxuICAgKiBAcGFyYW0gY29uZmlnIEhpZ2hsaWdodEpzIGNvbmZpZ3VyYXRpb24gYXJndW1lbnRcbiAgICovXG4gIGNvbmZpZ3VyZShjb25maWc6IEhpZ2hsaWdodENvbmZpZyk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9sb2FkZXIucmVhZHkucGlwZShcbiAgICAgIG1hcCgoaGxqczogSGlnaGxpZ2h0TGlicmFyeSkgPT4gaGxqcy5jb25maWd1cmUoY29uZmlnKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIGFsbCA8cHJlPjxjb2RlPi4uPC9jb2RlPjwvcHJlPiBibG9ja3Mgb24gYSBwYWdlLlxuICAgKi9cbiAgaW5pdEhpZ2hsaWdodGluZygpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fbG9hZGVyLnJlYWR5LnBpcGUoXG4gICAgICBtYXAoKGhsanM6IEhpZ2hsaWdodExpYnJhcnkpID0+IGhsanMuaW5pdEhpZ2hsaWdodGluZygpKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBuZXcgbGFuZ3VhZ2UgdG8gdGhlIGxpYnJhcnkgdW5kZXIgdGhlIHNwZWNpZmllZCBuYW1lLiBVc2VkIG1vc3RseSBpbnRlcm5hbGx5LlxuICAgKiBAcGFyYW0gbmFtZSBBIHN0cmluZyB3aXRoIHRoZSBuYW1lIG9mIHRoZSBsYW5ndWFnZSBiZWluZyByZWdpc3RlcmVkXG4gICAqIEBwYXJhbSBsYW5ndWFnZSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyB0aGUgbGFuZ3VhZ2UgZGVmaW5pdGlvbi5cbiAgICogVGhlIGZ1bmN0aW9uIGlzIHBhc3NlZCB0aGUgaGxqcyBvYmplY3QgdG8gYmUgYWJsZSB0byB1c2UgY29tbW9uIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZGVmaW5lZCB3aXRoaW4gaXQuXG4gICAqL1xuICByZWdpc3Rlckxhbmd1YWdlKG5hbWU6IHN0cmluZywgbGFuZ3VhZ2U6ICgpID0+IGFueSk6IE9ic2VydmFibGU8SGlnaGxpZ2h0TGlicmFyeT4ge1xuICAgIHJldHVybiB0aGlzLl9sb2FkZXIucmVhZHkucGlwZShcbiAgICAgIHRhcCgoaGxqczogSGlnaGxpZ2h0TGlicmFyeSkgPT4gaGxqcy5yZWdpc3Rlckxhbmd1YWdlKG5hbWUsIGxhbmd1YWdlKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gVGhlIGxhbmd1YWdlcyBuYW1lcyBsaXN0LlxuICAgKi9cbiAgbGlzdExhbmd1YWdlcygpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuIHRoaXMuX2xvYWRlci5yZWFkeS5waXBlKFxuICAgICAgbWFwKChobGpzOiBIaWdobGlnaHRMaWJyYXJ5KSA9PiBobGpzLmxpc3RMYW5ndWFnZXMoKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIExvb2tzIHVwIGEgbGFuZ3VhZ2UgYnkgbmFtZSBvciBhbGlhcy5cbiAgICogQHBhcmFtIG5hbWUgTGFuZ3VhZ2UgbmFtZVxuICAgKiBAcmV0dXJuIFRoZSBsYW5ndWFnZSBvYmplY3QgaWYgZm91bmQsIHVuZGVmaW5lZCBvdGhlcndpc2UuXG4gICAqL1xuICBnZXRMYW5ndWFnZShuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9sb2FkZXIucmVhZHkucGlwZShcbiAgICAgIG1hcCgoaGxqczogSGlnaGxpZ2h0TGlicmFyeSkgPT4gaGxqcy5nZXRMYW5ndWFnZShuYW1lKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXkgbGluZSBudW1iZXJzXG4gICAqIEBwYXJhbSBlbCBDb2RlIGVsZW1lbnRcbiAgICovXG4gIGxpbmVOdW1iZXJzQmxvY2soZWw6IEhUTUxFbGVtZW50KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fbG9hZGVyLnJlYWR5LnBpcGUoXG4gICAgICBmaWx0ZXIoKGhsanM6IEhpZ2hsaWdodExpYnJhcnkpID0+ICEhaGxqcy5saW5lTnVtYmVyc0Jsb2NrKSxcbiAgICAgIHRhcCgoaGxqczogSGlnaGxpZ2h0TGlicmFyeSkgPT4gaGxqcy5saW5lTnVtYmVyc0Jsb2NrKGVsKSlcbiAgICApO1xuICB9XG59XG4iXX0=