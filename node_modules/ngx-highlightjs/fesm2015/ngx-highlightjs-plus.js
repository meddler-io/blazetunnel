import { __decorate, __param, __metadata } from 'tslib';
import { InjectionToken, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Input, Output, Directive, Pipe, NgModule } from '@angular/core';
import { HttpParams, HttpClient, HttpClientModule } from '@angular/common/http';
import { HighlightModule } from 'ngx-highlightjs';
import { EMPTY } from 'rxjs';
import { publishReplay, refCount, catchError } from 'rxjs/operators';

const GIST_OPTIONS = new InjectionToken('GIST_OPTIONS');

let CodeLoader = class CodeLoader {
    constructor(_http, _options) {
        this._http = _http;
        this._options = _options;
    }
    /**
     * Get plus code
     * @param id Gist ID
     */
    getCodeFromGist(id) {
        let params;
        if (this.isOAuthProvided()) {
            params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);
        }
        return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });
    }
    /**
     * Get code by URL
     * @param url File raw link
     */
    getCodeFromUrl(url) {
        return this.fetchFile(url, { responseType: 'text' });
    }
    /**
     * Check if OAuth option is provided
     */
    isOAuthProvided() {
        return !!this._options && !!this._options.clientId && !!this._options.clientSecret;
    }
    fetchFile(url, options) {
        // Check if URL is valid
        if (isUrl(url)) {
            return this._http.get(url, options).pipe(
            // Catch response
            publishReplay(1), refCount(), catchError((err) => {
                console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);
                return EMPTY;
            }));
        }
        return EMPTY;
    }
};
CodeLoader.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GIST_OPTIONS,] }] }
];
CodeLoader.ɵprov = ɵɵdefineInjectable({ factory: function CodeLoader_Factory() { return new CodeLoader(ɵɵinject(HttpClient), ɵɵinject(GIST_OPTIONS, 8)); }, token: CodeLoader, providedIn: "root" });
CodeLoader = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(1, Optional()), __param(1, Inject(GIST_OPTIONS)),
    __metadata("design:paramtypes", [HttpClient, Object])
], CodeLoader);
function isUrl(url) {
    const regExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
    return regExp.test(url);
}

let GistDirective = class GistDirective {
    constructor(_loader) {
        this._loader = _loader;
        this.gistLoad = new EventEmitter();
    }
    set gist(value) {
        if (value) {
            this._loader.getCodeFromGist(value).subscribe((gist) => this.gistLoad.emit(gist));
        }
    }
};
GistDirective.ctorParameters = () => [
    { type: CodeLoader }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], GistDirective.prototype, "gist", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], GistDirective.prototype, "gistLoad", void 0);
GistDirective = __decorate([
    Directive({
        selector: '[gist]'
    }),
    __metadata("design:paramtypes", [CodeLoader])
], GistDirective);
let GistFilePipe = class GistFilePipe {
    transform(gist, fileName) {
        return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;
    }
};
GistFilePipe = __decorate([
    Pipe({
        name: 'gistFile'
    })
], GistFilePipe);

let CodeFromUrlPipe = class CodeFromUrlPipe {
    constructor(_loader) {
        this._loader = _loader;
    }
    transform(url) {
        return this._loader.getCodeFromUrl(url);
    }
};
CodeFromUrlPipe.ctorParameters = () => [
    { type: CodeLoader }
];
CodeFromUrlPipe = __decorate([
    Pipe({
        name: 'codeFromUrl'
    }),
    __metadata("design:paramtypes", [CodeLoader])
], CodeFromUrlPipe);

let HighlightPlusModule = class HighlightPlusModule {
};
HighlightPlusModule = __decorate([
    NgModule({
        imports: [
            HighlightModule,
            HttpClientModule
        ],
        declarations: [
            GistDirective,
            GistFilePipe,
            CodeFromUrlPipe
        ],
        exports: [
            HighlightModule,
            GistDirective,
            GistFilePipe,
            CodeFromUrlPipe
        ]
    })
], HighlightPlusModule);

/**
 * Generated bundle index. Do not edit.
 */

export { CodeFromUrlPipe, CodeLoader, GIST_OPTIONS, GistDirective, GistFilePipe, HighlightPlusModule };
//# sourceMappingURL=ngx-highlightjs-plus.js.map
