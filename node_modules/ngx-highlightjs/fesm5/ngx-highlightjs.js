import { __read, __spread, __decorate, __param, __metadata } from 'tslib';
import { InjectionToken, Inject, PLATFORM_ID, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, SecurityContext, ElementRef, Input, Output, Directive, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { BehaviorSubject, from, EMPTY, zip, animationFrameScheduler } from 'rxjs';
import { filter, take, switchMap, map, tap, catchError } from 'rxjs/operators';
import { isPlatformBrowser, DOCUMENT } from '@angular/common';

var HIGHLIGHT_OPTIONS = new InjectionToken('HIGHLIGHT_OPTIONS');

// @dynamic
var HighlightLoader = /** @class */ (function () {
    function HighlightLoader(doc, platformId, _options) {
        var _this = this;
        this._options = _options;
        // Stream that emits when hljs library is loaded and ready to use
        this._ready = new BehaviorSubject(null);
        this.ready = this._ready.asObservable().pipe(filter(function (hljs) { return !!hljs; }), take(1));
        // Check if hljs is already available
        if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {
            this._ready.next(doc.defaultView.hljs);
        }
        else {
            // Load hljs library
            this._loadLibrary().pipe(switchMap(function (hljs) {
                if (_this._options && _this._options.lineNumbers) {
                    // Make hljs available on window object (required for the line numbers library)
                    doc.defaultView.hljs = hljs;
                    // Load line numbers library
                    return loadLineNumbers().pipe(tap(function () { return _this._ready.next(hljs); }));
                }
                else {
                    _this._ready.next(hljs);
                    return EMPTY;
                }
            }), catchError(function (e) {
                console.error('Unable to load hljs library', e);
                return EMPTY;
            })).subscribe();
        }
    }
    /**
     * Lazy-Load highlight.js library
     */
    HighlightLoader.prototype._loadLibrary = function () {
        var _this = this;
        return (this._options && this._options.languages && Object.keys(this._options.languages).length)
            ? from(loadCoreLibrary()).pipe(switchMap(function (hljs) { return _this._loadLanguages(hljs); }))
            : from(loadAllLibrary());
    };
    /**
     * Lazy-load highlight.js languages
     */
    HighlightLoader.prototype._loadLanguages = function (hljs) {
        var languages = Object.entries(this._options.languages).map(function (_a) {
            var _b = __read(_a, 2), langName = _b[0], langLoader = _b[1];
            return importModule(langLoader()).pipe(tap(function (langFunc) { return hljs.registerLanguage(langName, langFunc); }));
        });
        return zip.apply(void 0, __spread(languages)).pipe(map(function () { return hljs; }));
    };
    HighlightLoader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHT_OPTIONS,] }] }
    ]; };
    HighlightLoader.ɵprov = ɵɵdefineInjectable({ factory: function HighlightLoader_Factory() { return new HighlightLoader(ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID), ɵɵinject(HIGHLIGHT_OPTIONS, 8)); }, token: HighlightLoader, providedIn: "root" });
    HighlightLoader = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Inject(DOCUMENT)),
        __param(1, Inject(PLATFORM_ID)),
        __param(2, Optional()), __param(2, Inject(HIGHLIGHT_OPTIONS)),
        __metadata("design:paramtypes", [Object, Object, Object])
    ], HighlightLoader);
    return HighlightLoader;
}());
/**
 * Import highlight.js core library
 */
function loadCoreLibrary() {
    return importModule(import('highlight.js/lib/highlight'));
}
/**
 * Import highlight.js library with all languages
 */
function loadAllLibrary() {
    return importModule(import('highlight.js'));
}
/**
 * Import line numbers library
 */
function loadLineNumbers() {
    return importModule(import('highlightjs-line-numbers.js'));
}
/**
 * Map loader response to module object
 */
var importModule = function (moduleLoader) {
    return from(moduleLoader).pipe(filter(function (module) { return !!module && !!module.default; }), map(function (module) { return module.default; }));
};
var ɵ0 = importModule;

var HighlightJS = /** @class */ (function () {
    function HighlightJS(_loader, options) {
        var _this = this;
        this._loader = _loader;
        // Load highlight.js library on init
        _loader.ready.pipe().subscribe(function (hljs) {
            _this._hljs = hljs;
            if (options && options.config) {
                // Set global config if present
                hljs.configure(options.config);
                if (hljs.listLanguages().length < 1) {
                    console.error('[HighlightJS]: No languages were registered!');
                }
            }
        });
    }
    Object.defineProperty(HighlightJS.prototype, "hljs", {
        // A reference for hljs library
        get: function () {
            return this._hljs;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Core highlighting function.
     * @param name Accepts a language name, or an alias
     * @param value A string with the code to highlight.
     * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish
     * even in case of detecting illegal syntax for the language instead of throwing an exception.
     * @param continuation An optional mode stack representing unfinished parsing.
     * When present, the function will restart parsing from this state instead of initializing a new one
     */
    HighlightJS.prototype.highlight = function (name, value, ignore_illegals, continuation) {
        return this._loader.ready.pipe(map(function (hljs) { return hljs.highlight(name, value, ignore_illegals, continuation); }));
    };
    /**
     * Highlighting with language detection.
     * @param value Accepts a string with the code to highlight
     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    HighlightJS.prototype.highlightAuto = function (value, languageSubset) {
        return this._loader.ready.pipe(map(function (hljs) { return hljs.highlightAuto(value, languageSubset); }));
    };
    /**
     * Post-processing of the highlighted markup.
     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.
     * Options are set globally with configure.
     * @param value Accepts a string with the highlighted markup
     */
    HighlightJS.prototype.fixMarkup = function (value) {
        return this._loader.ready.pipe(map(function (hljs) { return hljs.fixMarkup(value); }));
    };
    /**
     * Applies highlighting to a DOM node containing code.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.
     * See the class reference for all available language names and aliases.
     * @param block The element to apply highlight on.
     */
    HighlightJS.prototype.highlightBlock = function (block) {
        return this._loader.ready.pipe(map(function (hljs) { return hljs.highlightBlock(block); }));
    };
    /**
     * Configures global options:
     * @param config HighlightJs configuration argument
     */
    HighlightJS.prototype.configure = function (config) {
        return this._loader.ready.pipe(map(function (hljs) { return hljs.configure(config); }));
    };
    /**
     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
     */
    HighlightJS.prototype.initHighlighting = function () {
        return this._loader.ready.pipe(map(function (hljs) { return hljs.initHighlighting(); }));
    };
    /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param name A string with the name of the language being registered
     * @param language A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     */
    HighlightJS.prototype.registerLanguage = function (name, language) {
        return this._loader.ready.pipe(tap(function (hljs) { return hljs.registerLanguage(name, language); }));
    };
    /**
     * @return The languages names list.
     */
    HighlightJS.prototype.listLanguages = function () {
        return this._loader.ready.pipe(map(function (hljs) { return hljs.listLanguages(); }));
    };
    /**
     * Looks up a language by name or alias.
     * @param name Language name
     * @return The language object if found, undefined otherwise.
     */
    HighlightJS.prototype.getLanguage = function (name) {
        return this._loader.ready.pipe(map(function (hljs) { return hljs.getLanguage(name); }));
    };
    /**
     * Display line numbers
     * @param el Code element
     */
    HighlightJS.prototype.lineNumbersBlock = function (el) {
        return this._loader.ready.pipe(filter(function (hljs) { return !!hljs.lineNumbersBlock; }), tap(function (hljs) { return hljs.lineNumbersBlock(el); }));
    };
    HighlightJS.ctorParameters = function () { return [
        { type: HighlightLoader },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHT_OPTIONS,] }] }
    ]; };
    HighlightJS.ɵprov = ɵɵdefineInjectable({ factory: function HighlightJS_Factory() { return new HighlightJS(ɵɵinject(HighlightLoader), ɵɵinject(HIGHLIGHT_OPTIONS, 8)); }, token: HighlightJS, providedIn: "root" });
    HighlightJS = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(1, Optional()), __param(1, Inject(HIGHLIGHT_OPTIONS)),
        __metadata("design:paramtypes", [HighlightLoader, Object])
    ], HighlightJS);
    return HighlightJS;
}());

var Highlight = /** @class */ (function () {
    function Highlight(el, _hljs, _sanitizer, _options) {
        this._hljs = _hljs;
        this._sanitizer = _sanitizer;
        this._options = _options;
        // Stream that emits when code string is highlighted
        this.highlighted = new EventEmitter();
        this._nativeElement = el.nativeElement;
    }
    Highlight.prototype.ngOnChanges = function (changes) {
        if (changes.code &&
            changes.code.currentValue &&
            changes.code.currentValue !== changes.code.previousValue) {
            this.highlightElement(this.code, this.languages);
        }
    };
    /**
     * Highlighting with language detection and fix markup.
     * @param code Accepts a string with the code to highlight
     * @param languages An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    Highlight.prototype.highlightElement = function (code, languages) {
        var _this = this;
        // Set code text before highlighting
        this.setTextContent(code);
        this._hljs.highlightAuto(code, languages).subscribe(function (res) {
            // Set highlighted code
            _this.setInnerHTML(res.value);
            // Check if user want to show line numbers
            if (_this.lineNumbers && _this._options && _this._options.lineNumbers) {
                _this.addLineNumbers();
            }
            // Forward highlight response to the highlighted output
            _this.highlighted.emit(res);
        });
    };
    Highlight.prototype.addLineNumbers = function () {
        var _this = this;
        // Clean up line numbers observer
        this.destroyLineNumbersObserver();
        animationFrameScheduler.schedule(function () {
            // Add line numbers
            _this._hljs.lineNumbersBlock(_this._nativeElement).subscribe();
            // If lines count is 1, the line numbers library will not add numbers
            // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element
            _this._lineNumbersObs = new MutationObserver(function () {
                if (_this._nativeElement.firstElementChild && _this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {
                    _this._nativeElement.classList.add('hljs-line-numbers');
                }
                _this.destroyLineNumbersObserver();
            });
            _this._lineNumbersObs.observe(_this._nativeElement, { childList: true });
        });
    };
    Highlight.prototype.destroyLineNumbersObserver = function () {
        if (this._lineNumbersObs) {
            this._lineNumbersObs.disconnect();
            this._lineNumbersObs = null;
        }
    };
    Highlight.prototype.setTextContent = function (content) {
        var _this = this;
        animationFrameScheduler.schedule(function () {
            return _this._nativeElement.textContent = content;
        });
    };
    Highlight.prototype.setInnerHTML = function (content) {
        var _this = this;
        animationFrameScheduler.schedule(function () {
            return _this._nativeElement.innerHTML = _this._sanitizer.sanitize(SecurityContext.HTML, content);
        });
    };
    Highlight.ctorParameters = function () { return [
        { type: ElementRef },
        { type: HighlightJS },
        { type: DomSanitizer },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HIGHLIGHT_OPTIONS,] }] }
    ]; };
    __decorate([
        Input('highlight'),
        __metadata("design:type", String)
    ], Highlight.prototype, "code", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], Highlight.prototype, "languages", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], Highlight.prototype, "lineNumbers", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], Highlight.prototype, "highlighted", void 0);
    Highlight = __decorate([
        Directive({
            host: {
                '[class.hljs]': 'true'
            },
            selector: '[highlight]'
        }),
        __param(3, Optional()), __param(3, Inject(HIGHLIGHT_OPTIONS)),
        __metadata("design:paramtypes", [ElementRef,
            HighlightJS,
            DomSanitizer, Object])
    ], Highlight);
    return Highlight;
}());

var HighlightModule = /** @class */ (function () {
    function HighlightModule() {
    }
    HighlightModule = __decorate([
        NgModule({
            declarations: [Highlight],
            exports: [Highlight]
        })
    ], HighlightModule);
    return HighlightModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { HIGHLIGHT_OPTIONS, Highlight, HighlightJS, HighlightLoader, HighlightModule, ɵ0 };
//# sourceMappingURL=ngx-highlightjs.js.map
