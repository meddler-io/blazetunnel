{"version":3,"file":"ngx-highlightjs.js","sources":["ng://ngx-highlightjs/lib/highlight.model.ts","ng://ngx-highlightjs/lib/highlight.loader.ts","ng://ngx-highlightjs/lib/highlight.service.ts","ng://ngx-highlightjs/lib/highlight.ts","ng://ngx-highlightjs/lib/highlight.module.ts","ng://ngx-highlightjs/ngx-highlightjs.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface HighlightLibrary {\n\n  /**\n   * Core highlighting function.\n   * @param name Accepts a language name, or an alias\n   * @param value A string with the code to highlight.\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\n   * @param continuation An optional mode stack representing unfinished parsing.\n   * When present, the function will restart parsing from this state instead of initializing a new one\n   */\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult;\n\n  /**\n   * Highlighting with language detection.\n   * @param value Accepts a string with the code to highlight\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightAuto(value: string, languageSubset: string[]): HighlightResult;\n\n  /**\n   * Post-processing of the highlighted markup.\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\n   * Options are set globally with configure.\n   * @param value Accepts a string with the highlighted markup\n   */\n  fixMarkup(value: string): string;\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\n   * See the class reference for all available language names and aliases.\n   * @param block The element to apply highlight on.\n   */\n  highlightBlock(block: HTMLElement): void;\n\n  /**\n   * Configures global options:\n   * @param config HighlightJs configuration argument\n   */\n  configure(config: HighlightConfig): void;\n\n  /**\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n   */\n  initHighlighting(): void;\n\n  /**\n   * Adds new language to the library under the specified name. Used mostly internally.\n   * @param name A string with the name of the language being registered\n   * @param language A function that returns an object which represents the language definition.\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\n   */\n  registerLanguage(name: string, language: () => any): void;\n\n  /**\n   * @return The languages names list.\n   */\n  listLanguages(): string[];\n\n  /**\n   * Looks up a language by name or alias.\n   * @param name Language name\n   * @return The language object if found, undefined otherwise.\n   */\n  getLanguage(name: string): any;\n\n  /**\n   * Add line numbers to code element\n   * @param el Code element\n   */\n  lineNumbersBlock(el: Element): void;\n}\n\nexport interface HighlightConfig {\n  /** tabReplace: a string used to replace TAB characters in indentation. */\n  tabReplace?: string;\n  /** useBR: a flag to generate <br> tags instead of new-line characters in the output, useful when code is marked up using a non-<pre> container. */\n  useBR?: boolean;\n  /** classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets. */\n  classPrefix?: string;\n  /** languages: an array of language names and aliases restricting auto detection to only these languages. */\n  languages?: string[];\n}\n\nexport interface HighlightResult {\n  language?: string;\n  second_best?: any;\n  top?: any;\n  value?: string;\n  relevance?: number;\n}\n\nexport interface HighlightOptions {\n  config?: HighlightConfig;\n  languages?: { [name: string]: () => Promise<any> };\n  lineNumbers?: boolean;\n}\n\nexport const HIGHLIGHT_OPTIONS = new InjectionToken<HighlightOptions>('HIGHLIGHT_OPTIONS');\n","import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, Observable, from, EMPTY, zip } from 'rxjs';\nimport { catchError, tap, map, switchMap, filter, take } from 'rxjs/operators';\nimport { HIGHLIGHT_OPTIONS, HighlightLibrary, HighlightOptions } from './highlight.model';\n\n// @dynamic\n@Injectable({\n  providedIn: 'root'\n})\nexport class HighlightLoader {\n  // Stream that emits when hljs library is loaded and ready to use\n  private readonly _ready = new BehaviorSubject(null);\n  readonly ready = this._ready.asObservable().pipe(\n    filter((hljs: HighlightLibrary) => !!hljs),\n    take(1)\n  );\n\n  constructor(@Inject(DOCUMENT) doc: any,\n              @Inject(PLATFORM_ID) platformId: object,\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\n    // Check if hljs is already available\n    if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {\n      this._ready.next(doc.defaultView.hljs);\n    } else {\n      // Load hljs library\n      this._loadLibrary().pipe(\n        switchMap((hljs: HighlightLibrary) => {\n          if (this._options && this._options.lineNumbers) {\n            // Make hljs available on window object (required for the line numbers library)\n            doc.defaultView.hljs = hljs;\n            // Load line numbers library\n            return loadLineNumbers().pipe(tap(() => this._ready.next(hljs)));\n          } else {\n            this._ready.next(hljs);\n            return EMPTY;\n          }\n        }),\n        catchError((e: any) => {\n          console.error('Unable to load hljs library', e);\n          return EMPTY;\n        })\n      ).subscribe();\n    }\n  }\n\n  /**\n   * Lazy-Load highlight.js library\n   */\n  private _loadLibrary(): Observable<any> {\n    return (this._options && this._options.languages && Object.keys(this._options.languages).length)\n      ? from(loadCoreLibrary()).pipe(switchMap((hljs: HighlightLibrary) => this._loadLanguages(hljs)))\n      : from(loadAllLibrary());\n  }\n\n  /**\n   * Lazy-load highlight.js languages\n   */\n  private _loadLanguages(hljs: HighlightLibrary): Observable<any> {\n    const languages = Object.entries(this._options.languages).map(([langName, langLoader]) =>\n      importModule(langLoader()).pipe(\n        tap((langFunc: any) => hljs.registerLanguage(langName, langFunc))\n      )\n    );\n    return zip(...languages).pipe(map(() => hljs));\n  }\n}\n\n/**\n * Import highlight.js core library\n */\nfunction loadCoreLibrary(): Observable<HighlightLibrary> {\n  return importModule(import('highlight.js/lib/highlight'));\n}\n\n/**\n * Import highlight.js library with all languages\n */\nfunction loadAllLibrary(): Observable<HighlightLibrary> {\n  return importModule(import('highlight.js'));\n}\n\n/**\n * Import line numbers library\n */\nfunction loadLineNumbers(): Observable<any> {\n  return importModule(import('highlightjs-line-numbers.js'));\n}\n\n/**\n * Map loader response to module object\n */\nconst importModule = (moduleLoader: Promise<any>): Observable<any> => {\n  return from(moduleLoader).pipe(\n    filter((module: any) => !!module && !!module.default),\n    map((module: any) => module.default)\n  );\n};\n","import { Injectable, Inject, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { HighlightConfig, HighlightResult, HighlightLibrary, HighlightOptions, HIGHLIGHT_OPTIONS } from './highlight.model';\nimport { HighlightLoader } from './highlight.loader';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HighlightJS {\n\n  private _hljs!: HighlightLibrary;\n\n  // A reference for hljs library\n  get hljs(): HighlightLibrary | null {\n    return this._hljs;\n  }\n\n  constructor(private _loader: HighlightLoader, @Optional() @Inject(HIGHLIGHT_OPTIONS) options: HighlightOptions) {\n    // Load highlight.js library on init\n    _loader.ready.pipe().subscribe((hljs: HighlightLibrary) => {\n      this._hljs = hljs;\n      if (options && options.config) {\n        // Set global config if present\n        hljs.configure(options.config);\n        if (hljs.listLanguages().length < 1) {\n          console.error('[HighlightJS]: No languages were registered!');\n        }\n      }\n    });\n  }\n\n  /**\n   * Core highlighting function.\n   * @param name Accepts a language name, or an alias\n   * @param value A string with the code to highlight.\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\n   * @param continuation An optional mode stack representing unfinished parsing.\n   * When present, the function will restart parsing from this state instead of initializing a new one\n   */\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): Observable<HighlightResult> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlight(name, value, ignore_illegals, continuation))\n    );\n  }\n\n  /**\n   * Highlighting with language detection.\n   * @param value Accepts a string with the code to highlight\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightAuto(value: string, languageSubset: string[]): Observable<HighlightResult> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlightAuto(value, languageSubset))\n    );\n  }\n\n  /**\n   * Post-processing of the highlighted markup.\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\n   * Options are set globally with configure.\n   * @param value Accepts a string with the highlighted markup\n   */\n  fixMarkup(value: string): Observable<string> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.fixMarkup(value))\n    );\n  }\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\n   * See the class reference for all available language names and aliases.\n   * @param block The element to apply highlight on.\n   */\n  highlightBlock(block: HTMLElement): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlightBlock(block))\n    );\n  }\n\n  /**\n   * Configures global options:\n   * @param config HighlightJs configuration argument\n   */\n  configure(config: HighlightConfig): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.configure(config))\n    );\n  }\n\n  /**\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n   */\n  initHighlighting(): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.initHighlighting())\n    );\n  }\n\n  /**\n   * Adds new language to the library under the specified name. Used mostly internally.\n   * @param name A string with the name of the language being registered\n   * @param language A function that returns an object which represents the language definition.\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\n   */\n  registerLanguage(name: string, language: () => any): Observable<HighlightLibrary> {\n    return this._loader.ready.pipe(\n      tap((hljs: HighlightLibrary) => hljs.registerLanguage(name, language))\n    );\n  }\n\n  /**\n   * @return The languages names list.\n   */\n  listLanguages(): Observable<string[]> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.listLanguages())\n    );\n  }\n\n  /**\n   * Looks up a language by name or alias.\n   * @param name Language name\n   * @return The language object if found, undefined otherwise.\n   */\n  getLanguage(name: string): Observable<any> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.getLanguage(name))\n    );\n  }\n\n  /**\n   * Display line numbers\n   * @param el Code element\n   */\n  lineNumbersBlock(el: HTMLElement): Observable<any> {\n    return this._loader.ready.pipe(\n      filter((hljs: HighlightLibrary) => !!hljs.lineNumbersBlock),\n      tap((hljs: HighlightLibrary) => hljs.lineNumbersBlock(el))\n    );\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  Inject,\n  Optional,\n  OnChanges,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef,\n  SecurityContext\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { animationFrameScheduler } from 'rxjs';\nimport { HighlightJS } from './highlight.service';\nimport { HIGHLIGHT_OPTIONS, HighlightOptions, HighlightResult } from './highlight.model';\n\n@Directive({\n  host: {\n    '[class.hljs]': 'true'\n  },\n  selector: '[highlight]'\n})\nexport class Highlight implements OnChanges {\n\n  // Highlighted Code\n  private readonly _nativeElement: HTMLElement;\n\n  // Temp observer to observe when line numbers has been added to code element\n  private _lineNumbersObs: any;\n\n  // Highlight code input\n  @Input('highlight') code!: string;\n\n  // An optional array of language names and aliases restricting detection to only those languages.\n  // The subset can also be set with configure, but the local parameter overrides the option if set.\n  @Input() languages!: string[];\n\n  // Show line numbers\n  @Input() lineNumbers!: boolean;\n\n  // Stream that emits when code string is highlighted\n  @Output() highlighted = new EventEmitter<HighlightResult>();\n\n  constructor(el: ElementRef,\n              private _hljs: HighlightJS,\n              private _sanitizer: DomSanitizer,\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\n    this._nativeElement = el.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (\n      changes.code &&\n      changes.code.currentValue &&\n      changes.code.currentValue !== changes.code.previousValue\n    ) {\n      this.highlightElement(this.code, this.languages);\n    }\n  }\n\n  /**\n   * Highlighting with language detection and fix markup.\n   * @param code Accepts a string with the code to highlight\n   * @param languages An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightElement(code: string, languages?: string[]): void {\n    // Set code text before highlighting\n    this.setTextContent(code);\n    this._hljs.highlightAuto(code, languages).subscribe((res: any) => {\n      // Set highlighted code\n      this.setInnerHTML(res.value);\n      // Check if user want to show line numbers\n      if (this.lineNumbers && this._options && this._options.lineNumbers) {\n        this.addLineNumbers();\n      }\n      // Forward highlight response to the highlighted output\n      this.highlighted.emit(res);\n    });\n  }\n\n  private addLineNumbers() {\n    // Clean up line numbers observer\n    this.destroyLineNumbersObserver();\n    animationFrameScheduler.schedule(() => {\n      // Add line numbers\n      this._hljs.lineNumbersBlock(this._nativeElement).subscribe();\n      // If lines count is 1, the line numbers library will not add numbers\n      // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element\n      this._lineNumbersObs = new MutationObserver(() => {\n        if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {\n          this._nativeElement.classList.add('hljs-line-numbers');\n        }\n        this.destroyLineNumbersObserver();\n      });\n      this._lineNumbersObs.observe(this._nativeElement, { childList: true });\n    });\n  }\n\n  private destroyLineNumbersObserver() {\n    if (this._lineNumbersObs) {\n      this._lineNumbersObs.disconnect();\n      this._lineNumbersObs = null;\n    }\n  }\n\n  private setTextContent(content: string) {\n    animationFrameScheduler.schedule(() =>\n      this._nativeElement.textContent = content\n    );\n  }\n\n  private setInnerHTML(content: string) {\n    animationFrameScheduler.schedule(() =>\n      this._nativeElement.innerHTML = this._sanitizer.sanitize(SecurityContext.HTML, content)\n    );\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { Highlight } from './highlight';\n\n@NgModule({\n  declarations: [Highlight],\n  exports: [Highlight]\n})\nexport class HighlightModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}